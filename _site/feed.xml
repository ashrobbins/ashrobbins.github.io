<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-06T14:01:12+00:00</updated><id>http://localhost:4000/</id><title type="html">Ash Robbins</title><subtitle>Front End Developer</subtitle><entry><title type="html">Fixing an issue with scroll-snap on iOS</title><link href="http://localhost:4000/2019/11/06/fixing-an-issue-with-scroll-snap-on-ios.html" rel="alternate" type="text/html" title="Fixing an issue with scroll-snap on iOS" /><published>2019-11-06T00:00:00+00:00</published><updated>2019-11-06T00:00:00+00:00</updated><id>http://localhost:4000/2019/11/06/fixing-an-issue-with-scroll-snap-on-ios</id><content type="html" xml:base="http://localhost:4000/2019/11/06/fixing-an-issue-with-scroll-snap-on-ios.html">&lt;p&gt;On one of our sites we have a grid of article thumbnails that becomes horizontally scrollable on mobile, and we’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;scroll-snap&lt;/code&gt; on the container element to give a more carousel-like feel and make sure that the list always snaps to the edge of one of the items.&lt;/p&gt;

&lt;p&gt;Our QA team raised a bug on certain iOS devices where the list would always snap back to the first item and not scroll through as the user expected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/ZdNd2oQCV3yrMrfpZs/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After a fair amount of head scrartching this was fixed by adding&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;-webkit-overflow-scrolling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to the container element.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/d7BjVQoKpG0WhxchJY/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="css" /><category term="mobile" /><summary type="html">On one of our sites we have a grid of article thumbnails that becomes horizontally scrollable on mobile, and we’ve used scroll-snap on the container element to give a more carousel-like feel and make sure that the list always snaps to the edge of one of the items.</summary></entry><entry><title type="html">Switching Java version in terminal</title><link href="http://localhost:4000/2019/01/15/switching-java-version-in-terminal.html" rel="alternate" type="text/html" title="Switching Java version in terminal " /><published>2019-01-15T00:00:00+00:00</published><updated>2019-01-15T00:00:00+00:00</updated><id>http://localhost:4000/2019/01/15/switching-java-version-in-terminal</id><content type="html" xml:base="http://localhost:4000/2019/01/15/switching-java-version-in-terminal.html">&lt;p&gt;I was trying to run a maven command the other day and it kept failing due to my version of Java being too recent. You can quickly find out what version of Java you’re using with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;java -version&lt;/code&gt;, which will give you an output like this…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10.0.2&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see above, we’re using version 10.x.x. To switch to another installed version, simply run…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`/usr/libexec/java_home -v 1.8`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…where &lt;code class=&quot;highlighter-rouge&quot;&gt;1.8&lt;/code&gt; is the major release you’re after.&lt;/p&gt;

&lt;p&gt;There are more robust ways to set versioning on a global level, but if you’re after a quick fix for your current terminal context, the above will do the job.&lt;/p&gt;</content><author><name></name></author><category term="java" /><summary type="html">I was trying to run a maven command the other day and it kept failing due to my version of Java being too recent. You can quickly find out what version of Java you’re using with the command java -version, which will give you an output like this…</summary></entry><entry><title type="html">New year new me 🙄</title><link href="http://localhost:4000/2019/01/12/new-year-new-me.html" rel="alternate" type="text/html" title="New year new me 🙄" /><published>2019-01-12T00:00:00+00:00</published><updated>2019-01-12T00:00:00+00:00</updated><id>http://localhost:4000/2019/01/12/new-year-new-me-%F0%9F%99%84</id><content type="html" xml:base="http://localhost:4000/2019/01/12/new-year-new-me.html">&lt;p&gt;The first post on this site is from September 2011, and there are only a pathetic 11 in total to show for the following 8 years.&lt;/p&gt;

&lt;p&gt;I know for a fact that I’ve written other posts that just aren’t on here now, either because I wasn’t keen on them afterwards or they’ve fallen by the wayside during countless moves from one platform to the other.&lt;/p&gt;

&lt;p&gt;Several times over the years I’ve tried to tell myself that I will post more on this blog, and sometimes it’s worked for a month or two, but for some reason I never stick to it. I think I’ve been anxious that what I put out wouldn’t be good enough in some way.&lt;/p&gt;

&lt;p&gt;But enough of that rubbish. The web industry moves and changes so quickly and there’s always so much to learn. So a good use of this blog is to post things I learn, and if doing that is able to help someone along the way then great, if not I’ve still got a resource of personal learnings I can always refer back to.&lt;/p&gt;

&lt;p&gt;Let’s see how long it lasts this time…&lt;/p&gt;</content><author><name></name></author><category term="general" /><summary type="html">The first post on this site is from September 2011, and there are only a pathetic 11 in total to show for the following 8 years.</summary></entry><entry><title type="html">String interpolation with template literals</title><link href="http://localhost:4000/2018/02/09/string-interpolation-with-template-literals.html" rel="alternate" type="text/html" title="String interpolation with template literals" /><published>2018-02-09T10:00:36+00:00</published><updated>2018-02-09T10:00:36+00:00</updated><id>http://localhost:4000/2018/02/09/string-interpolation-with-template-literals</id><content type="html" xml:base="http://localhost:4000/2018/02/09/string-interpolation-with-template-literals.html">&lt;p&gt;One useful feature in ES6 that I came across recently is template literals. Template literals can be used to store a sequence of characters in much the same way as string literals, but they come with some added bonuses.&lt;/p&gt;

&lt;h2 id=&quot;expression-interpolation&quot;&gt;Expression interpolation&lt;/h2&gt;

&lt;p&gt;To create a template literal we use back-ticks (` `) as opposed to the double or single quotes used for string literals. A basic example would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Robbins`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both of these variables would evaluate to a string if they were logged out in console. The benefits of template literals become apparent when we take things to the next level and try to include variables within a string. Traditionally if we had a variable we could insert it into a string like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hi, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, how's it hanging?&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is a very basic example but the closing of quotes and the inclusion of multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operators can become clumsy and unreadable when you’re dealing with large templates and multiple variables.&lt;/p&gt;

&lt;p&gt;Template literals allow us to simply type the name of the variable into the middle of the string using the &lt;code class=&quot;highlighter-rouge&quot;&gt;${NAME}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;s2&quot;&gt;`Hi, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, how's it hanging?`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don’t need to worry about closing and re-opening quotes and there are no concatenation operators to worry about. Template literals give us a much cleaner method of interpolating variables into a string.&lt;/p&gt;

&lt;h2 id=&quot;multi-line-strings&quot;&gt;Multi-line strings&lt;/h2&gt;

&lt;p&gt;Another nice way we can make use of template literals is when we need to build multi-line strings in our JavaScript. For example if we need to output a block of HTML for a card template, we might normally write something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;div class='c-card'&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;h3 class='c-card__name'&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/h3&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;span&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;job_title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/span&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s easy to see how this could quickly get quite messy and it isn’t the nicest thing in the world to read. Template literals would let us write that code like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;div class=&quot;c-card&quot;&amp;gt;
                &amp;lt;h3 class=&quot;c-card__name&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/h3&amp;gt;
                &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much neater and much closer to natural HTML. We can get rid of the need to close and re-open quotes, we don’t need the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; at the end of each line and we have even used the expression interpolation syntax from before to include our variables.&lt;/p&gt;

&lt;p&gt;Template literals give us a much cleaner method of interpolating variables into a string and make handling multi-line strings much simpler.&lt;/p&gt;</content><author><name></name></author><category term="js" /><category term="es6" /><summary type="html">One useful feature in ES6 that I came across recently is template literals. Template literals can be used to store a sequence of characters in much the same way as string literals, but they come with some added bonuses.</summary></entry><entry><title type="html">Angular scope in your console</title><link href="http://localhost:4000/2015/07/21/angular-scope-in-your-console.html" rel="alternate" type="text/html" title="Angular scope in your console" /><published>2015-07-21T16:35:36+01:00</published><updated>2015-07-21T16:35:36+01:00</updated><id>http://localhost:4000/2015/07/21/angular-scope-in-your-console</id><content type="html" xml:base="http://localhost:4000/2015/07/21/angular-scope-in-your-console.html">&lt;p&gt;Sometimes it can be really useful to inspect the data you’re working with on an Angular build. There are some plugins and extensions to help with this, like the Batarang extension for Chrome.&lt;/p&gt;

&lt;p&gt;I prefer to have my scope in my dev tools console while I’m looking at a page. That way I can see how the data changes as I interact with the page, or view the data returned from an API. There’s a simple command which lets you do that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Select an element in Chrome’s dev tools, paste that into the dev tools console and hit return. You’ll get an interactive model of the scope for the selected element.&lt;/p&gt;</content><author><name></name></author><category term="angular" /><summary type="html">Sometimes it can be really useful to inspect the data you’re working with on an Angular build. There are some plugins and extensions to help with this, like the Batarang extension for Chrome.</summary></entry><entry><title type="html">Things that piss me off about the internet vol.1</title><link href="http://localhost:4000/2015/04/01/things-that-piss-me-off-v1.html" rel="alternate" type="text/html" title="Things that piss me off about the internet vol.1" /><published>2015-04-01T16:35:36+01:00</published><updated>2015-04-01T16:35:36+01:00</updated><id>http://localhost:4000/2015/04/01/things-that-piss-me-off-v1</id><content type="html" xml:base="http://localhost:4000/2015/04/01/things-that-piss-me-off-v1.html">&lt;p&gt;There are a lot of things that piss me off about the web industry and the internet in general, so I thought I’d start a series of posts where I can rant about them.&lt;/p&gt;

&lt;h2 id=&quot;sketchnotes-from-conference-talks&quot;&gt;Sketchnotes from conference talks&lt;/h2&gt;
&lt;p&gt;What the hell is the point in these? They are just scribblings that don’t capture anything about a talk, and are essentially a collection of disconnected sentences that barely relate to the subject.&lt;/p&gt;

&lt;p&gt;How is that useful to anyone? It’s a collection of random words! You’re meant to take notes so you dont forget stuff and you can read it back later.&lt;/p&gt;

&lt;p&gt;Sketchnotes are basically just a way for people to show everyone else how good they are at drawing. They just give people something else to post on Twitter, and have no use to anyone except the person who drew them.&lt;/p&gt;

&lt;h2 id=&quot;cat-pictures&quot;&gt;Cat pictures&lt;/h2&gt;
&lt;p&gt;Don’t get me wrong I think cats are ace, I’ve got a couple of my own. But who decided that every demo site or placeholder image should be a picture of a kitten?&lt;/p&gt;

&lt;p&gt;Have a bit of imagination, there’s bloody cats everywhere!&lt;/p&gt;

&lt;h2 id=&quot;coffee&quot;&gt;Coffee&lt;/h2&gt;
&lt;p&gt;As soon as someone decides to embark on a career in the web industry, they also feel they need to become a bloody coffee connoisseur. Ordering in weird and random kinds of coffee from all over the world. It all stinks as much as each other so it makes no difference.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Have you tried these new beans from the arse-end of Ecuador? They are so aromatic and offer a much fuller flavour. I’m off to grind some beans right now actually. Don’t be silly, of course I will measure them out first! I could never go back to instant, oh god no.”&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Random hipster&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Piss off and fetch me a brew. And no I don't care what tea bags you use.&lt;/p&gt;

&lt;h6 id=&quot;ive-realised-im-a-very-easily-annoyed-person&quot;&gt;(I’ve realised I’m a very easily annoyed person.)&lt;/h6&gt;</content><author><name></name></author><category term="rant" /><summary type="html">There are a lot of things that piss me off about the web industry and the internet in general, so I thought I’d start a series of posts where I can rant about them.</summary></entry><entry><title type="html">AngularJS - ngHide for oldIE</title><link href="http://localhost:4000/2015/01/14/angularjs-nghide-for-old-ie.html" rel="alternate" type="text/html" title="AngularJS - ngHide for oldIE" /><published>2015-01-14T15:35:36+00:00</published><updated>2015-01-14T15:35:36+00:00</updated><id>http://localhost:4000/2015/01/14/angularjs-nghide-for-old-ie</id><content type="html" xml:base="http://localhost:4000/2015/01/14/angularjs-nghide-for-old-ie.html">&lt;p&gt;Yeah I know I know, old IEs are dumb and should be run over by a bus or thrown off a bridge and blah blah blah. But sometimes 20% of your client’s users are using IE7, and another 20% on top of that use IE8, so you’ve got to deal with it.&lt;/p&gt;

&lt;p&gt;The trouble is, to support these browsers you need to include a legacy version of Angular, but some pretty basic directives don’t work in these browsers,&lt;a href=&quot;https://github.com/angular/angular.js/commit/c785267eb8780d8b7658ef93ebb5ebddd566294d&quot;&gt;for example ngHide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hiding and showing elements based on whether a scope object is &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; is one of the most common things we do with Angular, so at work we built a custom directive which will work across all browsers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ar.directives'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'arHide'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;arHide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arHide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arHide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng-hide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng-hide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve created a new module called &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.directives&lt;/code&gt;, and a new directive called &lt;code class=&quot;highlighter-rouge&quot;&gt;arHide&lt;/code&gt;. You can call these what you want, &lt;strong&gt;ar&lt;/strong&gt; is just my initials.&lt;/p&gt;

&lt;h3 id=&quot;isolated-scope&quot;&gt;Isolated scope&lt;/h3&gt;

&lt;p&gt;I’ve then got an &lt;strong&gt;isolated scope&lt;/strong&gt; on the directive, and I’ve created a property within it called &lt;strong&gt;arHide&lt;/strong&gt;. The name of this property will correspond to the way I use the directive in my markup (&lt;code class=&quot;highlighter-rouge&quot;&gt;ar-hide&lt;/code&gt;), therefore I can use the shorthand &lt;code class=&quot;highlighter-rouge&quot;&gt;arHide: &quot;=&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our isolated scope property will always take the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ar-hide&lt;/code&gt; attribute whenever we use it in our app, and it’s clever enough to recognise the camel-case and look for its equivalent hyphenated attribute.&lt;/p&gt;

&lt;h3 id=&quot;adding-functionality&quot;&gt;Adding functionality&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; option can be used when you want a directive to manipulate the DOM. In this case I’ll be adding and removing the &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-hide&lt;/code&gt; class when an argument is true or false.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; accepts three arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt;, which in this case is my isolated scope from earlier&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;element&lt;/code&gt;, which is the element this directive is called from&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attrs&lt;/code&gt;, which is a reference to the attributes of the &lt;code class=&quot;highlighter-rouge&quot;&gt;element&lt;/code&gt; passed in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t need &lt;code class=&quot;highlighter-rouge&quot;&gt;attrs&lt;/code&gt; in this case so I’ve left it out.&lt;/p&gt;

&lt;p&gt;I use &lt;code class=&quot;highlighter-rouge&quot;&gt;$.watch&lt;/code&gt; to keep a constant eye on the argument provided in &lt;code class=&quot;highlighter-rouge&quot;&gt;arHide&lt;/code&gt;, which translates to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ar-hide&lt;/code&gt; attribute in the markup. When this argument resolves to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; I add the class &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-hide&lt;/code&gt;, if it’s false the class gets removed. Simple as that.&lt;/p&gt;

&lt;h3 id=&quot;markup&quot;&gt;Markup&lt;/h3&gt;

&lt;p&gt;Using the new directive is really simple.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;//The element will be hidden if 'valueToTest' is true
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ar-hide=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;valueToTest&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hide me if true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="css" /><category term="angular" /><summary type="html">Yeah I know I know, old IEs are dumb and should be run over by a bus or thrown off a bridge and blah blah blah. But sometimes 20% of your client’s users are using IE7, and another 20% on top of that use IE8, so you’ve got to deal with it.</summary></entry><entry><title type="html">Simple check for old IE</title><link href="http://localhost:4000/2014/08/22/simple-check-for-old-ie.html" rel="alternate" type="text/html" title="Simple check for old IE" /><published>2014-08-22T16:35:36+01:00</published><updated>2014-08-22T16:35:36+01:00</updated><id>http://localhost:4000/2014/08/22/simple-check-for-old-ie</id><content type="html" xml:base="http://localhost:4000/2014/08/22/simple-check-for-old-ie.html">&lt;p&gt;On a recent project I needed to be able to detect if a user was browsing using IE8 or 7, and serve different functionality to them if that was true.&lt;/p&gt;

&lt;p&gt;After looking around a really easy way to do this is to simply check whether the browsers supports the &lt;code class=&quot;highlighter-rouge&quot;&gt;leadingWhiteSpace&lt;/code&gt; feature, using jQuery’s &lt;code class=&quot;highlighter-rouge&quot;&gt;$.supports&lt;/code&gt; method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leadingWhitespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Old versions of Internet Explorer don’t support this feature, and therefore &lt;code class=&quot;highlighter-rouge&quot;&gt;oldIE&lt;/code&gt; will be false on these browsers. You could then apply a conditional class to your &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; tag to style something differently, or write a quick &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement to check the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;oldIE&lt;/code&gt; before executing some script for example.&lt;/p&gt;</content><author><name></name></author><category term="js" /><category term="browsers" /><summary type="html">On a recent project I needed to be able to detect if a user was browsing using IE8 or 7, and serve different functionality to them if that was true.</summary></entry><entry><title type="html">A couple of problems I’ve found using Flexbox</title><link href="http://localhost:4000/2013/08/02/a-couple-of-flexbox-problems.html" rel="alternate" type="text/html" title="A couple of problems I've found using Flexbox" /><published>2013-08-02T16:35:36+01:00</published><updated>2013-08-02T16:35:36+01:00</updated><id>http://localhost:4000/2013/08/02/a-couple-of-flexbox-problems</id><content type="html" xml:base="http://localhost:4000/2013/08/02/a-couple-of-flexbox-problems.html">&lt;p&gt;Let me preface this post by saying that Flexbox is completely ace, and there are so many awesome use-cases for it. The particular one I’m going to talk about here is a grid layout for a product listing. Four columns, two rows, and just a simple image and price for each item. The site I’m working on is WIP but as an example let’s say it could be the grid of products in the pen below. (Will only work in Chrome and latest Opera).&lt;/p&gt;

&lt;iframe id=&quot;cp_embed_mnoqd&quot; src=&quot;//codepen.io/ashrobbins/embed/mnoqd?height=423&amp;amp;theme-id=0&amp;amp;slug-hash=mnoqd&amp;amp;user=ashrobbins&amp;amp;default-tab=result&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; height=&quot;423&quot; allowtransparency=&quot;true&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width: 100%; overflow: hidden;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Pretty simple. If you view the HTML you’ll see it’s nothing more than a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt;, with each list item containing an &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; and an &lt;code class=&quot;highlighter-rouge&quot;&gt;h1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The CSS has some basic reset styles and then gets into the two classes &lt;code class=&quot;highlighter-rouge&quot;&gt;.products&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.product&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;.products&lt;/code&gt; class is where most of the flexbox work is done here. First we change the &lt;code class=&quot;highlighter-rouge&quot;&gt;display&lt;/code&gt; property to &lt;code class=&quot;highlighter-rouge&quot;&gt;flex&lt;/code&gt; - there are five lines for this as there are browsers which need a vendor prefix, and also some browsers who still need the older flexbox syntax. &lt;a href=&quot;http://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;See here&lt;/a&gt; for an overview of where flexbox is at right now.&lt;/p&gt;

&lt;p&gt;The next declaration on &lt;code class=&quot;highlighter-rouge&quot;&gt;.products&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-flow: row wrap;&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-flow&lt;/code&gt; is a shorthand property used to define both &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-direction&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-wrap&lt;/code&gt; at the same time. So in this declaration we are telling the flex-items to display from left to right, and to wrap onto a new line when they run out of room.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-in-firefox-and-safari&quot;&gt;Wrapping in Firefox and Safari&lt;/h2&gt;

&lt;p&gt;The first problem I came across is that Firefox and Safari currently don’t recognise or support the &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-wrap&lt;/code&gt; property, meaning that the items will just continue to flow outside of the parent container. You’d need to write a fallback for these browsers that don’t support wrapping.&lt;/p&gt;

&lt;p&gt;View this post in Firefox to see what this looks like.&lt;/p&gt;

&lt;h2 id=&quot;alignment-issues&quot;&gt;Alignment issues&lt;/h2&gt;

&lt;p&gt;The other problem is a bit of a tricky one. If you’re listing products in a grid, it’s highly likely that you’re pulling that data from a database of items. It’s therefore highly likely that you’ll quite often have a list of items that doesn’t give you enough items to fill up each row.&lt;/p&gt;

&lt;p&gt;I want my items to have space between them, and for the last one in each row to butt up to the right hand edge of the parent container. This is possible by applying the property &lt;code class=&quot;highlighter-rouge&quot;&gt;justify-content&lt;/code&gt; with a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;space-between&lt;/code&gt; to the container. This will line up the first item in a row with the left edge of the container, and the last item in the row to the right edge of the container, with the remaining space distributed evenly between all the items in the row.&lt;/p&gt;

&lt;iframe id=&quot;cp_embed_mexFs&quot; src=&quot;//codepen.io/ashrobbins/embed/mexFs?height=444&amp;amp;theme-id=344&amp;amp;slug-hash=mexFs&amp;amp;user=ashrobbins&amp;amp;default-tab=result&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; height=&quot;444&quot; allowtransparency=&quot;true&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width: 100%; overflow: hidden;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;As you can see, the top row looks great, but the second row looks a bit pants. It is possible to make the products align in the way I want, by changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;justify-content&lt;/code&gt; value to &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-start&lt;/code&gt;. However this doesn’t then distribute remaining space on a row between the product items. In theory I could make each item 25% wide, and then add an inner wrapper to each one so I can apply padding and create the effect of space between the items, but it just feels like there should be a built in solution via CSS.&lt;/p&gt;

&lt;iframe id=&quot;cp_embed_ofJqg&quot; src=&quot;//codepen.io/ashrobbins/embed/ofJqg?height=467&amp;amp;theme-id=344&amp;amp;slug-hash=ofJqg&amp;amp;user=ashrobbins&amp;amp;default-tab=result&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; height=&quot;467&quot; allowtransparency=&quot;true&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width: 100%; overflow: hidden;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I’m probably being too picky here. This solution is perfectly fine and works in Chrome. Obviously it isn’t ready to be used in a production environment yet because of the lack of browser support. But I’d love to know if there is a way to align the items distributing the available space evenly, but also aligning items in a row to the left.&lt;/p&gt;</content><author><name></name></author><category term="css" /><category term="flexbox" /><summary type="html">Let me preface this post by saying that Flexbox is completely ace, and there are so many awesome use-cases for it. The particular one I’m going to talk about here is a grid layout for a product listing. Four columns, two rows, and just a simple image and price for each item. The site I’m working on is WIP but as an example let’s say it could be the grid of products in the pen below. (Will only work in Chrome and latest Opera).</summary></entry><entry><title type="html">Responsive breakpoints</title><link href="http://localhost:4000/2013/07/19/responsive-breakpoints.html" rel="alternate" type="text/html" title="Responsive breakpoints" /><published>2013-07-19T16:35:36+01:00</published><updated>2013-07-19T16:35:36+01:00</updated><id>http://localhost:4000/2013/07/19/responsive-breakpoints</id><content type="html" xml:base="http://localhost:4000/2013/07/19/responsive-breakpoints.html">&lt;p&gt;I just read this quote in .Net magazine:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…rather than [device-specific] breakpoints, I’d decrease browser width until things looked broken or cramped, add a breakpoint and repeat…&lt;/p&gt;

  &lt;p&gt;Dan Tello&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what I’ve always done and is exactly the way we should approach making sure responsive layouts behave properly.&lt;/p&gt;

&lt;p&gt;I never thought the idea of having pre-defined breakpoints for iPhone, iPad and desktop etc was particularly useful, and in fact it seems much more aligned with an adaptive layout. Even when responsive design was just a baby there were already hundreds of devices with different widths so setting a few different breakpoints has never made sense.&lt;/p&gt;

&lt;p&gt;At the end of the day it’s in the name: breakpoint. Find out where your design breaks, then fix it.&lt;/p&gt;</content><author><name></name></author><category term="css" /><category term="responsive" /><summary type="html">I just read this quote in .Net magazine:</summary></entry></feed>