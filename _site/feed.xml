<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-03T14:54:38+01:00</updated><id>http://localhost:4000/</id><title type="html">Ash Robbins</title><subtitle>Front End Developer</subtitle><entry><title type="html">Create multiple vars from object keys</title><link href="http://localhost:4000/2019/12/09/create-multiple-vars-from-object-keys.html" rel="alternate" type="text/html" title="Create multiple vars from object keys" /><published>2019-12-09T00:00:00+00:00</published><updated>2019-12-09T00:00:00+00:00</updated><id>http://localhost:4000/2019/12/09/create-multiple-vars-from-object-keys</id><content type="html" xml:base="http://localhost:4000/2019/12/09/create-multiple-vars-from-object-keys.html">&lt;p&gt;Let’s say you have an object that looks like this…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And for some reason maybe you need to create some local variables within a function based on the values of the keys in that object. You can do that like this…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As long as each variable name you supply maps to the name of a key in the object, you’re good to go.&lt;/p&gt;</content><author><name></name></author><category term="js" /><summary type="html">Let’s say you have an object that looks like this…</summary></entry><entry><title type="html">Copy objects in JS with spread syntax</title><link href="http://localhost:4000/2019/12/09/copy-objects-in-js-with-spread-syntax.html" rel="alternate" type="text/html" title="Copy objects in JS with spread syntax" /><published>2019-12-09T00:00:00+00:00</published><updated>2019-12-09T00:00:00+00:00</updated><id>http://localhost:4000/2019/12/09/copy-objects-in-js-with-spread-syntax</id><content type="html" xml:base="http://localhost:4000/2019/12/09/copy-objects-in-js-with-spread-syntax.html">&lt;p&gt;Let’s say in your code you have an object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to copy that object to a new object you can do that like…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you wanted to copy that object but also update one of the values, you could do that like…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'purple'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="js" /><summary type="html">Let’s say in your code you have an object:</summary></entry><entry><title type="html">Set multiple styles in JS with cssText</title><link href="http://localhost:4000/2019/11/19/set-multiple-styles-in-js-with-style-csstext.html" rel="alternate" type="text/html" title="Set multiple styles in JS with cssText" /><published>2019-11-19T00:00:00+00:00</published><updated>2019-11-19T00:00:00+00:00</updated><id>http://localhost:4000/2019/11/19/set-multiple-styles-in-js-with-style-csstext</id><content type="html" xml:base="http://localhost:4000/2019/11/19/set-multiple-styles-in-js-with-style-csstext.html">&lt;p&gt;If you want to add multiple styles to an element via JavaScript, and you don’t care about over-riding any existing style attribute it may have, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;cssText&lt;/code&gt; to do that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'height: 100px; opacity: 1;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This saves having to write two separate lines for each style update.&lt;/p&gt;</content><author><name></name></author><category term="css" /><category term="js" /><summary type="html">If you want to add multiple styles to an element via JavaScript, and you don’t care about over-riding any existing style attribute it may have, you can use cssText to do that.</summary></entry><entry><title type="html">Fixing an issue with scroll-snap on iOS</title><link href="http://localhost:4000/2019/11/06/fixing-an-issue-with-scroll-snap-on-ios.html" rel="alternate" type="text/html" title="Fixing an issue with scroll-snap on iOS" /><published>2019-11-06T00:00:00+00:00</published><updated>2019-11-06T00:00:00+00:00</updated><id>http://localhost:4000/2019/11/06/fixing-an-issue-with-scroll-snap-on-ios</id><content type="html" xml:base="http://localhost:4000/2019/11/06/fixing-an-issue-with-scroll-snap-on-ios.html">&lt;p&gt;On one of our sites we have a grid of article thumbnails that becomes horizontally scrollable on mobile, and we’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;scroll-snap&lt;/code&gt; on the container element to give a more carousel-like feel and make sure that the list always snaps to the edge of one of the items.&lt;/p&gt;

&lt;p&gt;Our QA team raised a bug on certain iOS devices where the list would always snap back to the first item and not scroll through as the user expected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/ZdNd2oQCV3yrMrfpZs/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After a fair amount of head scrartching this was fixed by adding&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;-webkit-overflow-scrolling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to the container element.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/d7BjVQoKpG0WhxchJY/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="css" /><summary type="html">On one of our sites we have a grid of article thumbnails that becomes horizontally scrollable on mobile, and we’ve used scroll-snap on the container element to give a more carousel-like feel and make sure that the list always snaps to the edge of one of the items.</summary></entry><entry><title type="html">SVG gradients in CSS</title><link href="http://localhost:4000/2019/04/05/svg-gradients-in-css.html" rel="alternate" type="text/html" title="SVG gradients in CSS" /><published>2019-04-05T00:00:00+01:00</published><updated>2019-04-05T00:00:00+01:00</updated><id>http://localhost:4000/2019/04/05/svg-gradients-in-css</id><content type="html" xml:base="http://localhost:4000/2019/04/05/svg-gradients-in-css.html">&lt;p&gt;On a recent project we were building a new home page hero widget and the design called for the user to be able to select from a set of themes to decide what colour the hero should be.&lt;/p&gt;

&lt;p&gt;They do this by assigning a ‘Theme-xx’ tag to the content item, and then we apply a class to the hero based on the theme tag used. Simple enough, we have a BEM modifier class that switches out colours based on the chosen tag.&lt;/p&gt;

&lt;p&gt;One part of the design however is an SVG background graphic that has a gradient running left to right. Instead of having multiple SVGs in the page that get shown or hidden based on a class, I wanted to see if there was a cleverer way to do it.&lt;/p&gt;

&lt;iframe height=&quot;400&quot; scrolling=&quot;no&quot; title=&quot;SVG Gradient Tags&quot; src=&quot;https://codepen.io/ashrobbins/embed/YMJEMX?height=265&amp;amp;theme-id=dark&amp;amp;default-tab=html,result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt; See the Pen &lt;a href=&quot;https://codepen.io/ashrobbins/pen/YMJEMX&quot;&gt;SVG Gradient Tags&lt;/a&gt; by Ash Robbins (&lt;a href=&quot;https://codepen.io/ashrobbins&quot;&gt;@ashrobbins&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;. &lt;/iframe&gt;

&lt;p&gt;As you can see in the pen above I’ve got a hidden svg which simply contains several &lt;code class=&quot;highlighter-rouge&quot;&gt;linearGradient&lt;/code&gt; tags, each with an &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; and two or more &lt;code class=&quot;highlighter-rouge&quot;&gt;stop&lt;/code&gt; tags within it. These are where the colours for the gradients are defined. We can then use css to update the &lt;code class=&quot;highlighter-rouge&quot;&gt;fill&lt;/code&gt; property of the &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; element based on an id of one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;linearGradient&lt;/code&gt; tags, and the gradient used gets updated.&lt;/p&gt;</content><author><name></name></author><category term="css" /><category term="svg" /><summary type="html">On a recent project we were building a new home page hero widget and the design called for the user to be able to select from a set of themes to decide what colour the hero should be.</summary></entry><entry><title type="html">Switching Java version in terminal</title><link href="http://localhost:4000/2019/01/15/switching-java-version-in-terminal.html" rel="alternate" type="text/html" title="Switching Java version in terminal " /><published>2019-01-15T00:00:00+00:00</published><updated>2019-01-15T00:00:00+00:00</updated><id>http://localhost:4000/2019/01/15/switching-java-version-in-terminal</id><content type="html" xml:base="http://localhost:4000/2019/01/15/switching-java-version-in-terminal.html">&lt;p&gt;I was trying to run a maven command the other day and it kept failing due to my version of Java being too recent. You can quickly find out what version of Java you’re using with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;java -version&lt;/code&gt;, which will give you an output like this…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10.0.2&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see above, we’re using version 10.x.x. To switch to another installed version, simply run…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`/usr/libexec/java_home -v 1.8`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…where &lt;code class=&quot;highlighter-rouge&quot;&gt;1.8&lt;/code&gt; is the major release you’re after.&lt;/p&gt;

&lt;p&gt;There are more robust ways to set versioning on a global level, but if you’re after a quick fix for your current terminal context, the above will do the job.&lt;/p&gt;</content><author><name></name></author><category term="general" /><summary type="html">I was trying to run a maven command the other day and it kept failing due to my version of Java being too recent. You can quickly find out what version of Java you’re using with the command java -version, which will give you an output like this…</summary></entry><entry><title type="html">New year new me 🙄</title><link href="http://localhost:4000/2019/01/12/new-year-new-me.html" rel="alternate" type="text/html" title="New year new me 🙄" /><published>2019-01-12T00:00:00+00:00</published><updated>2019-01-12T00:00:00+00:00</updated><id>http://localhost:4000/2019/01/12/new-year-new-me-%F0%9F%99%84</id><content type="html" xml:base="http://localhost:4000/2019/01/12/new-year-new-me.html">&lt;p&gt;The first post on this site is from September 2011, and there are only a pathetic 11 in total to show for the following 8 years.&lt;/p&gt;

&lt;p&gt;I know for a fact that I’ve written other posts that just aren’t on here now, either because I wasn’t keen on them afterwards or they’ve fallen by the wayside during countless moves from one platform to the other.&lt;/p&gt;

&lt;p&gt;Several times over the years I’ve tried to tell myself that I will post more on this blog, and sometimes it’s worked for a month or two, but for some reason I never stick to it. I think I’ve been anxious that what I put out wouldn’t be good enough in some way.&lt;/p&gt;

&lt;p&gt;But enough of that rubbish. The web industry moves and changes so quickly and there’s always so much to learn. So a good use of this blog is to post things I learn, and if doing that is able to help someone along the way then great, if not I’ve still got a resource of personal learnings I can always refer back to.&lt;/p&gt;

&lt;p&gt;Let’s see how long it lasts this time…&lt;/p&gt;</content><author><name></name></author><category term="general" /><summary type="html">The first post on this site is from September 2011, and there are only a pathetic 11 in total to show for the following 8 years.</summary></entry><entry><title type="html">String interpolation with template literals</title><link href="http://localhost:4000/2018/02/09/string-interpolation-with-template-literals.html" rel="alternate" type="text/html" title="String interpolation with template literals" /><published>2018-02-09T10:00:36+00:00</published><updated>2018-02-09T10:00:36+00:00</updated><id>http://localhost:4000/2018/02/09/string-interpolation-with-template-literals</id><content type="html" xml:base="http://localhost:4000/2018/02/09/string-interpolation-with-template-literals.html">&lt;p&gt;One useful feature in ES6 that I came across recently is template literals. Template literals can be used to store a sequence of characters in much the same way as string literals, but they come with some added bonuses.&lt;/p&gt;

&lt;h2 id=&quot;expression-interpolation&quot;&gt;Expression interpolation&lt;/h2&gt;

&lt;p&gt;To create a template literal we use back-ticks (` `) as opposed to the double or single quotes used for string literals. A basic example would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Robbins`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both of these variables would evaluate to a string if they were logged out in console. The benefits of template literals become apparent when we take things to the next level and try to include variables within a string. Traditionally if we had a variable we could insert it into a string like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hi, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, how's it hanging?&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is a very basic example but the closing of quotes and the inclusion of multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operators can become clumsy and unreadable when you’re dealing with large templates and multiple variables.&lt;/p&gt;

&lt;p&gt;Template literals allow us to simply type the name of the variable into the middle of the string using the &lt;code class=&quot;highlighter-rouge&quot;&gt;${NAME}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;s2&quot;&gt;`Hi, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, how's it hanging?`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don’t need to worry about closing and re-opening quotes and there are no concatenation operators to worry about. Template literals give us a much cleaner method of interpolating variables into a string.&lt;/p&gt;

&lt;h2 id=&quot;multi-line-strings&quot;&gt;Multi-line strings&lt;/h2&gt;

&lt;p&gt;Another nice way we can make use of template literals is when we need to build multi-line strings in our JavaScript. For example if we need to output a block of HTML for a card template, we might normally write something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;div class='c-card'&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;h3 class='c-card__name'&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/h3&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;span&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;job_title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/span&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s easy to see how this could quickly get quite messy and it isn’t the nicest thing in the world to read. Template literals would let us write that code like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;div class=&quot;c-card&quot;&amp;gt;
                &amp;lt;h3 class=&quot;c-card__name&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/h3&amp;gt;
                &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much neater and much closer to natural HTML. We can get rid of the need to close and re-open quotes, we don’t need the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; at the end of each line and we have even used the expression interpolation syntax from before to include our variables.&lt;/p&gt;

&lt;p&gt;Template literals give us a much cleaner method of interpolating variables into a string and make handling multi-line strings much simpler.&lt;/p&gt;</content><author><name></name></author><category term="js" /><summary type="html">One useful feature in ES6 that I came across recently is template literals. Template literals can be used to store a sequence of characters in much the same way as string literals, but they come with some added bonuses.</summary></entry><entry><title type="html">Angular scope in your console</title><link href="http://localhost:4000/2015/07/21/angular-scope-in-your-console.html" rel="alternate" type="text/html" title="Angular scope in your console" /><published>2015-07-21T16:35:36+01:00</published><updated>2015-07-21T16:35:36+01:00</updated><id>http://localhost:4000/2015/07/21/angular-scope-in-your-console</id><content type="html" xml:base="http://localhost:4000/2015/07/21/angular-scope-in-your-console.html">&lt;p&gt;Sometimes it can be really useful to inspect the data you’re working with on an Angular build. There are some plugins and extensions to help with this, like the Batarang extension for Chrome.&lt;/p&gt;

&lt;p&gt;I prefer to have my scope in my dev tools console while I’m looking at a page. That way I can see how the data changes as I interact with the page, or view the data returned from an API. There’s a simple command which lets you do that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Select an element in Chrome’s dev tools, paste that into the dev tools console and hit return. You’ll get an interactive model of the scope for the selected element.&lt;/p&gt;</content><author><name></name></author><category term="angular" /><summary type="html">Sometimes it can be really useful to inspect the data you’re working with on an Angular build. There are some plugins and extensions to help with this, like the Batarang extension for Chrome.</summary></entry><entry><title type="html">Things that piss me off about the internet vol.1</title><link href="http://localhost:4000/2015/04/01/things-that-piss-me-off-v1.html" rel="alternate" type="text/html" title="Things that piss me off about the internet vol.1" /><published>2015-04-01T16:35:36+01:00</published><updated>2015-04-01T16:35:36+01:00</updated><id>http://localhost:4000/2015/04/01/things-that-piss-me-off-v1</id><content type="html" xml:base="http://localhost:4000/2015/04/01/things-that-piss-me-off-v1.html">&lt;p&gt;There are a lot of things that piss me off about the web industry and the internet in general, so I thought I’d start a series of posts where I can rant about them.&lt;/p&gt;

&lt;h2 id=&quot;sketchnotes-from-conference-talks&quot;&gt;Sketchnotes from conference talks&lt;/h2&gt;
&lt;p&gt;What the hell is the point in these? They are just scribblings that don’t capture anything about a talk, and are essentially a collection of disconnected sentences that barely relate to the subject.&lt;/p&gt;

&lt;p&gt;How is that useful to anyone? It’s a collection of random words! You’re meant to take notes so you dont forget stuff and you can read it back later.&lt;/p&gt;

&lt;p&gt;Sketchnotes are basically just a way for people to show everyone else how good they are at drawing. They just give people something else to post on Twitter, and have no use to anyone except the person who drew them.&lt;/p&gt;

&lt;h2 id=&quot;cat-pictures&quot;&gt;Cat pictures&lt;/h2&gt;
&lt;p&gt;Don’t get me wrong I think cats are ace, I’ve got a couple of my own. But who decided that every demo site or placeholder image should be a picture of a kitten?&lt;/p&gt;

&lt;p&gt;Have a bit of imagination, there’s bloody cats everywhere!&lt;/p&gt;

&lt;h2 id=&quot;coffee&quot;&gt;Coffee&lt;/h2&gt;
&lt;p&gt;As soon as someone decides to embark on a career in the web industry, they also feel they need to become a bloody coffee connoisseur. Ordering in weird and random kinds of coffee from all over the world. It all stinks as much as each other so it makes no difference.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Have you tried these new beans from the arse-end of Ecuador? They are so aromatic and offer a much fuller flavour. I’m off to grind some beans right now actually. Don’t be silly, of course I will measure them out first! I could never go back to instant, oh god no.”&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Random hipster&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Piss off and fetch me a brew. And no I don't care what tea bags you use.&lt;/p&gt;

&lt;h6 id=&quot;ive-realised-im-a-very-easily-annoyed-person&quot;&gt;(I’ve realised I’m a very easily annoyed person.)&lt;/h6&gt;</content><author><name></name></author><category term="rant" /><summary type="html">There are a lot of things that piss me off about the web industry and the internet in general, so I thought I’d start a series of posts where I can rant about them.</summary></entry></feed>