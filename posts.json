/**
 Export to JSON plugin for PHPMyAdmin
 @version 0.1
 */

// Database 'ashrobbinsDB'
// ashrobbinsDB.posts

[{"id": 37,"title": "Angular scope in your console","slug": "angular-scope-in-console","date": "2015-07-21 00:00:00","hero": "","content_html": "<p>Sometimes it can be really useful to inspect the data you\'re working with on an Angular build. There are some plugins and extensions to help with this, like the Batarang extension for Chrome.</p>

<p>I prefer to have my scope in my dev tools console while I\'m looking at a page. That way I can see how the data changes as I interact with the page, or view the data returned from an API. There\'s a simple command which lets you do that.</p>

<pre><code>angular.element($0).scope()
</code></pre>

<p>Select an element in Chrome\'s dev tools, paste that into the dev tools console and hit return. You\'ll get an interactive model of the scope for the selected element.</p>

<p><img src=\"http://www.ashrobbins.com/img/dev-tools.png\" alt=\"Dev tools\" title=\"\" /></p>"}, {"id": 36,"title": "Things that piss me off about the internet vol.1","slug": "things-that-piss-me-off-v1","date": "2015-04-01 00:00:00","hero": "","content_html": "<p>There are a lot of things that piss me off about the web industry and the internet in general, so I thought I\'d start a series of posts where I can rant about them.</p>

<h6>(I\'ve realised I\'m a very easily annoyed person.)</h6>

<h2>Sketchnotes from conference talks</h2>

<p>What the hell is the point in these? Just scribblings that don\'t capture anything about a talk, and are essentially a collection of disconnected sentences that barely relate to the subject?</p>

<p>They\'re basically just a way for people to show everyone else how good they are at drawing. They just give people something else to post on Twitter, and have no use to anyone except the person who drew them.</p>

<h2>Cat pictures</h2>

<p>Don\'t get me wrong I think cats are ace, I\'ve got a couple of my own. But who decided that every demo site or placeholder image should be a picture of a kitten?</p>

<p>Have a bit of imagination, there\'s bloody cats everywhere!</p>

<h2>Coffee</h2>

<p>As soon as someone decides to embark on a career in the web industry, they also feel they need to become a bloody coffee connoisseur. Ordering in weird and random kinds of coffee from all over the world. It all stinks as much as each other so it makes no difference.</p>

<p>\"Have you tried these new beans from the arse-end of Ecuador? They are so aromatic and just offer a fuller flavour and I could never go back to instant, oh god no.\"</p>

<p>Piss off and fetch me a brew. And no I don\'t care what tea bags you use.</p>"}, {"id": 33,"title": "AngularJS - ngHide for old IEs","slug": "angular-hide-for-old-ie","date": "2015-01-14 00:00:00","hero": "","content_html": "<p>Yeah I know I know, old IEs are dumb and should be run over by a bus or thrown off a bridge and blah blah blah. But sometimes 20% of your client\'s users are using IE7, and another 20% on top of that use IE8, so you\'ve got to deal with it.</p>

<p>The trouble is, to support these browsers you need to include a legacy version of Angular, but some pretty basic directives don\'t work in these browsers, <a href=\"https://github.com/angular/angular.js/commit/c785267eb8780d8b7658ef93ebb5ebddd566294d\">for example ngHide</a>.</p>

<p>Hiding and showing elements based on whether a scope object is <code>true</code> or <code>false</code> is one of the most common things we do with Angular, so at work we built a custom directive which will work across all browsers.</p>

<pre><code>angular.module(\'ar.directives\', [])
    .directive(\'arHide\', function () {
        return {
            scope: {
                arHide: \"=\"
            },
            link: function (scope, element) {
                scope.$watch(\"arHide\", function () {
                    if (scope.arHide) {
                        element.addClass(\"ng-hide\");
                    } else {
                        element.removeClass(\"ng-hide\");
                    }
                });
            }
        };
    });
</code></pre>

<p>I\'ve created a new module called <code>ar.directives</code>, and a new directive called <code>arHide</code>. You can call these what you want, <strong>ar</strong> is just my initials.</p>

<h2>Isolated scope</h2>

<p>I\'ve then got an <strong>isolated scope</strong> on the directive, and I\'ve created a property within it called <strong>arHide</strong>. The name of this property will correspond to the way I use the directive in my markup (<code>ar-hide</code>), therefore I can use the shorthand <code>arHide:\"=\"</code>.</p>

<p>Our isolated scope property will always take the value of the <code>ar-hide</code> attribute whenever we use it in our app, and it\'s clever enough to recognise the camel-case and look for it\'s equivalent hyphenated attribute.</p>

<h2>Adding functionality</h2>

<p>The <code>link</code> option can be used when you want a directive to manipulate the DOM. In this case I\'ll be adding and removing the <code>ng-hide</code> class when an argument is true or false.</p>

<p><code>link</code> accepts three arguments:</p>

<ul>
<li><code>scope</code>, which in this case is my isolated scope from earlier</li>
<li><code>element</code> which is the element this directive is called from</li>
<li><code>attrs</code> which is a reference to the attributes of the <code>element</code> passed in</li>
</ul>

<p>I don\'t need <code>attrs</code> in this case so I\'ve left it out.</p>

<p>I use <code>$.watch</code> to keep a constant eye on the argument provided in <code>arHide</code>, which translates to the <code>ar-hide</code> attribute in the markup. When this argument resolves to <code>true</code> I add the class <code>ng-hide</code>, if it\'s false the class gets removed. Simple as that.</p>

<h2>Markup</h2>

<p>Using the new directive is really simple.</p>

<pre><code>// The element will be hidden if \'valueToTest\' is true
<p ar-hide=\"valueToTest\">Hide me if true</p>
</code></pre>"}, {"id": 30,"title": "Simple Check for Old IEs","slug": "simple-check-old-ie","date": "2014-08-22 00:00:00","hero": "","content_html": "<p>On a recent project I needed to be able to detect if a user was browsing using IE8 or 7, and serve different functionality to them if that was true.</p>

<p>After looking around a really easy way to do this is to simply check whether the browsers supports the <code>leadingWhiteSpace</code> feature, using jQuery\'s <code>$.supports</code> method.</p>

<pre><code>if ($.support.leadingWhitespace == false) {
     var oldIE = true;
}
</code></pre>

<p>Old versions of Internet Explorer don\'t support this feature, and therefore <code>oldIE</code> will be false on these browsers. You could then apply a conditional class to your <code>body</code> tag to style something differently, or write a quick <code>if</code> statement to check the value of <code>oldIE</code> before executing some script for example.</p>"}, {"id": 21,"title": "A Couple of Problems I\'ve Found Using Flexbox","slug": "couple-problems-found-using-flexbox","date": "2013-08-02 00:00:00","hero": "","content_html": "<p>Let me preface this post by saying that Flexbox is completely ace, and there are so many awesome use-cases for it. The particular one I\'m going to talk about here is a grid layout for a product listing. Four columns, two rows, and just a simple image and price for each item. The site I\'m working on is WIP but as an example let\'s say it could be the grid of products in the pen below. (Will only work in Chrome and latest Opera).</p>

<iframe id=\"cp_embed_mnoqd\" src=\"//codepen.io/ashrobbins/embed/mnoqd?height=423&theme-id=0&slug-hash=mnoqd&user=ashrobbins&default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"423\" allowtransparency=\"true\" class=\"cp_embed_iframe\" style=\"width: 100%; overflow: hidden;\"></iframe>

<p>Pretty simple. If you view the HTML you\'ll see it\'s nothing more than a simple <code>ul</code>, with each list item containing an \'img\' and an \'h1\'.</p>

<p>The CSS has some basic reset styles and then gets into the two classes <code>.products</code> and <code>.product</code>.</p>

<p>The <code>.products</code> class is where most of the flexbox work is done here. First we change the <code>display</code> property to <code>flex</code>; there are five lines for this as there are browsers which need a vendor prefix, and also some browsers who still need the older flexbox syntax. <a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">See here</a> for an overview of where flexbox is at right now.</p>

<p>The next declaration on <code>.products</code> is <code>flex-flow: row wrap;</code>. <code>flex-flow</code> is a shorthand property used to define both <code>flex-direction</code> and <code>flex-wrap</code> at the same time. So in this declaration we are telling the flex-items to display from left to right, and to wrap onto a new line when they run out of room.</p>

<h2>Wrapping in Firefox and Safari</h2>

<p>The first problem I came across is that Firefox and Safari currently don\'t recognise or support the <code>flex-wrap</code> property, meaning that the items will just continue to flow outside of the parent container. You\'d need to write a fallback for these browsers that don\'t support wrapping.</p>

<p>View this post in Firefox to see what this looks like.</p>

<h2>Alignment issues</h2>

<p>The other problem is a bit of a tricky one. If you\'re listing products in a grid, it\'s highly likely that you\'re pulling that data from a database of items. It\'s therefore highly likely that you\'ll quite often have a list of items that doesn\'t give you enough items to fill up each row.</p>

<p>I want my items to have space between them, and for the last one in each row to butt up to the right hand edge of the parent container. This is possible by applying the property <code>justify-content</code> with a value of <code>space-between</code> to the container. This will line up the first item in a row with the left edge of the container, and the last item in the row to the right edge of the container, with the remaining space distributed evenly between all the items in the row.</p>

<iframe id=\"cp_embed_mexFs\" src=\"//codepen.io/ashrobbins/embed/mexFs?height=444&theme-id=344&slug-hash=mexFs&user=ashrobbins&default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"444\" allowtransparency=\"true\" class=\"cp_embed_iframe\" style=\"width: 100%; overflow: hidden;\"></iframe>

<p>As you can see, the top row looks great, but the second row looks a bit pants. It is possible to make the products align in the way I want, by changing the <code>justify-content</code> value to <code>flex-start</code>. However this doesn\'t then distribute remaining space on a row between the product items. In theory I could make each item 25% wide, and then add an inner wrapper to each one so I can apply padding and create the effect of space between the items, but it just feels like there should be a built in solution via CSS.</p>

<iframe id=\"cp_embed_ofJqg\" src=\"//codepen.io/ashrobbins/embed/ofJqg?height=467&theme-id=344&slug-hash=ofJqg&user=ashrobbins&default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"467\" allowtransparency=\"true\" class=\"cp_embed_iframe\" style=\"width: 100%; overflow: hidden;\"></iframe>

<p>I\'m probably being too picky here. This solution is perfectly fine and works in Chrome. Obviously it isn\'t ready to be used in a production environment yet because of the lack of browser support. But I\'d love to know if there is a way to align the items distributing the available space evenly, but also aligning items in a row to the left.</p>"}, {"id": 22,"title": "Responsive breakpoints - It\'s in the name","slug": "responsive-breakpoints","date": "2013-07-19 00:00:00","hero": "","content_html": "<p>I just read this quote in .Net magazine:</p>

<blockquote>
  <p><em>â€œâ€¦rather than [device-specific] breakpoints, Iâ€™d decrease browser width until things looked broken or cramped, add a breakpoint and repeatâ€¦â€</em></p>

  <p>Dan Tello</p>
</blockquote>

<p>This is what Iâ€™ve always done and is exactly the way we should approach making sure responsive layouts behave properly.</p>

<p>I never thought the idea of having pre-defined breakpoints for iPhone, iPad and desktop etc was particularly useful, and in fact it seems much more aligned with an adaptive layout. Even when responsive design was just a baby there were already hundreds of devices with different widths so setting a few different breakpoints has never made sense.</p>

<p>At the end of the day itâ€™s in the name: breakpoint. Find out where your design breaks, then fix it.</p>"}, {"id": 23,"title": "Offset the post list in WordPress","slug": "offset-the-post-list-in-wordpress","date": "2013-02-01 00:00:00","hero": "","content_html": "<p>Sometimes in your WordPress theme you might want to display a featured post or your latest post in a different way than the rest of the list, to draw more attention to it for example.</p>

<p>All you need to do to make that happen is add offset=1 to a query_posts function, and then go ahead and write your loop to display your post list.</p>

<pre><code>&lt;?php
query_posts( \'offset=1\' );
while (have_posts()) : the_post();
    &lt;article&gt;
        &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;
        &lt;div class=\"post-date&gt;&lt;?php echo get_the_date(\'j M Y\'); ?&gt;&lt;/div&gt;
    &lt;/article&gt;
endwhile;
?&gt;
</code></pre>"}, {"id": 25,"title": "Quickie on CSS weight","slug": "quickie-on-css-weight","date": "2013-01-11 00:00:00","hero": "","content_html": "<p>In this completely made up and unrealistic example, which version is heavier? Thisâ€¦</p>

<pre><code>.main-nav li,
.main-nav a {
    padding:0.5em 1em;
}
.main-nav a {
    text-align:center;
}
</code></pre>

<p>or</p>

<pre><code>.main-nav li {
    padding:0.5em 1em;
}
.main-nav a {
    padding:0.5em 1em;
    text-align:center;
}
</code></pre>

<p>Iâ€™m pretty certain that version one is better because there are only two actual declarations as opposed to three in version two. Just confused me momentarily because they are technically both seven lines of CSS, and only 10 characters different in length.</p>

<h4>Update</h4>

<p>I had a reply to this question from Harry Roberts, A.K.A. <a href=\"http://www.twitter.com/csswizardry\">@csswizardry</a>:</p>

<blockquote>
  <p><em>Here, itâ€™s not about the weight of the CSS that matters, itâ€™s the sensibility of itâ€™s architectureâ€¦ The simplest test is just looking out for repetition.</em></p>

  <p><em>Repetition should be avoided, not necessarily from a weight point of view (repetition actually compresses (e.g. gzip) better than non-repeated strings) but from a maintainability point of view. The problem with repetition in CSS is the maintenance overheadâ€¦</em></p>

  <p><em>In the second example you are repeating <code>padding:0.5em 1em</code> twice, this means that â€“ should you need to change it <code>padding:1em 2em</code> â€“ you would have to make that change twice.</em></p>

  <p><em>Your declarations are more likely to change than your selectors; your selectors are likely to remain fairly constant (youâ€™re more likely to change the <code>padding</code> values than you are to change <code>.main-nav a{}</code>) so author your CSS to make these changes as easy as possible to implement.</em></p>

  <p><em>Hope that helps,
  H</em></p>
</blockquote>"}, {"id": 26,"title": "WordPress â€“ Including Extra Stylesheets","slug": "wordpress-extra-stylesheets","date": "2012-12-04 00:00:00","hero": "","content_html": "<p>I always thought, just like with any other normal site, that it was fine to stick a call for an additional stylesheet inside my header.php file. But to allow greater flexibility for child themes and also if other developers decide they want to do some tinkering with your theme, itâ€™s actually a lot safer to use wp<em>enqueue</em>style (codex page).</p>

<p>Below is how I include a stylesheet for a Google Web Font on this site. The following code goes in functions.php.</p>

<pre><code>function load_stylesheets() {
    wp_register_style(\'googleFonts\', \'http://fonts.googleapis.com/css?family=PT+Sans:wp_enqueue_style( \'googleFonts\');
}
add_action(\'wp_print_styles\', \'load_stylesheets\');
</code></pre>

<p>If you need to add more you simply add a new case of both wp<em>register</em>style and wp<em>enqueue</em>style inside your function.</p>

<pre><code>function load_stylesheets() {
    wp_register_style(\'googleFonts\', \'http://fonts.googleapis.com/css?family=PT+Sans:400,700\');
    wp_enqueue_style( \'googleFonts\');

    wp_register_style(\'fortawesome\', get_bloginfo(\'template_url\').\'/css/font-awesome.css\');
    wp_enqueue_style( \'fortawesome\');
}
add_action(\'wp_print_styles\', \'load_stylesheets\');
</code></pre>

<p>Easy peasy.</p>"}, {"id": 27,"title": "jQuery tooltips","slug": "jquery-tooltips","date": "2012-11-01 00:00:00","hero": "","content_html": "<p>Sometimes you might need to give users a bit of extra information about something on your site, but you might not necessarily have the room to do it within your design. One way you could get around that is to show that extra info when an element is hovered.</p>

<p><a href=\"http://ashrobbins.com/demos/jquery-tooltips/\">Check out the demo</a></p>

<h3>HTML</h3>

<pre><code>&lt;div class=\"logo\"&gt;
    &lt;img src=\"bull-logo.png\" /&gt;
    &lt;span class=\"tool-tip-holder\"&gt;
        span class=\"tool-tip\"&gt;Lightning Couriers&lt;/span&gt;
    &lt;/span&gt;
&lt;/div&gt;
</code></pre>

<p>The HTML is pretty simple. We need a containing div, in this case itâ€™s called .logo, inside that we need two things.</p>

<p>First we need some content and that could be anything you like. For this Iâ€™ve used an img.</p>

<p>The second thing we need is a span with the class .tool-tip-holder. This will then hold another span with the class .tool-tip and this is where Iâ€™ve entered what I want to appear in the tooltip.</p>

<h3>CSS</h3>

<pre><code>.logo {
    position:relative;
}
</code></pre>

<p>The .logo div needs to be relatively positioned so that we can then position the .tool-tip-holder absolutely inside it.</p>

<pre><code>.tool-tip-holder {
    position:absolute;
    top:0;
    left:50%;
}
</code></pre>

<p>The .tool-tip-holder is needed because I want the .tool-tip to be centrally aligned above the element I hover over. So by giving .tool-tip-holder absolute positioning and placing it 50% from the left edge of its parent .logo, .tooltip will by default start 50% from the left edge of the .logo element too.</p>

<pre><code>.tool-tip {
    position:relative;
    top:-45px;
    left:-50%;
    z-index:100;
    white-space:nowrap;
}
</code></pre>

<p>To make sure that .tool-tip is centred, we give it relative positioning, which means that any top, right, bottom or left values we give it will be based on itâ€™s own current position and dimensions. Giving it a left value of -50% will tell the .tool-tip element to move to the left, and to move for half of itâ€™s own width, given that it is positioned relative to itself. Bit complicated to explain but trust me, it works!</p>

<h3>jQuery</h3>

<p>Now our markup and CSS is in place, we need to add some behaviour to the tooltip, and we do that using jQuery.</p>

<pre><code>$(document).ready(function () {
    $(\'.tool-tip\').each(function (i) {
        $(this).hide();
    });

    $(\'.logo\').each(function (i) {
        $(this).hover(
            function () {
                $(this).find(\'.tool-tip\').fadeIn(400);
            },
            function () {
                $(this).find(\'.tool-tip\').fadeOut(400);
            }
        );
    });
});
</code></pre>

<p>Going through this step by stepâ€¦</p>

<pre><code>$(\'.tool-tip\').each(function (i) {
    $(this).hide();
});
</code></pre>

<p>Look for any elements with a class of .tool-tip and hide them.</p>

<pre><code>$(\'.logo\').each(function (i) {
    $(this).hover(
        function () {
            $(this).find(\'.tool-tip\').fadeIn(400);
        },
        function () {
            $(this).find(\'.tool-tip\').fadeOut(400);
        }
    );
});
</code></pre>

<p>Look for any elements with a class of .logo. When they are hovered, find any child elements with a class of .tool-tip and fade them in over 400 milliseconds. When the .logo element is unhovered, fade the .tool-tip element back out over 400 milliseconds.</p>

<p>And thatâ€™s all there is to it. Iâ€™m sure this will be pretty easy to accomplish without jQuery as well and by using CSS3, but this solution will be compatible with a wider variety of browsers for now. Maybe the CSS3 route is a topic for another post.</p>

<p><a href=\"http://ashrobbins.com/demos/jquery-tooltips/\">Check out the demo</a></p>"}, {"id": 28,"title": "Simple Horizontal Nav with CSS","slug": "simple-horizontal-nav-with-css","date": "2012-08-22 00:00:00","hero": "","content_html": "<p>A common feature on almost every website youâ€™ll see is a horizontal navigation menu near the top of the page, listing out the main features or areas of interest of the site. Setting up a nav like this is pretty simple. Start off with your bog standard ul with a list of links.</p>

<pre><code><ul>
    <li>
        <a href=\"#\">Home</a>
    </li>
    <li>
        <a href=\"#\">About</a>
    </li>
    <li>
        <a href=\"#\">Contact</a>
    </li>
</ul>
</code></pre>

<p>That gives you a very basic bullet pointed list, like this. Next weâ€™ll add some basic CSS to remove the bullets and the default margin and padding applied to the ul by the browser.</p>

<pre><code>ul {
    list-style:none;
    margin:0;
    padding:0;
}
</code></pre>

<p>In practice youâ€™re probably going to have some kind of reset in place to remove or apply this kind of styling globally, but for the sake of this demo itâ€™s important we make sure we cover all bases. Your list should now look like this. Now itâ€™s time to make the list items sit next to each other, and we do that with a very simple float declaration.</p>

<pre><code>li {
    float:left;
}
</code></pre>

<p>Now we should be looking at something like this, and essentially thatâ€™s what we wanted to achieve. We have a list of links and they are displayed horizontally. But it could look a hell of a lot better, so letâ€™s add some rules to the anchors to make them easier to read and easier to click.</p>

<pre><code>a {
    display:block;
    padding:7px 10px;

    color:#222;
    background:#eee;
    text-decoration:none;
}
</code></pre>

<p>Now all of our links have a nice big clickable area thanks to the padding weâ€™ve applied, and some presentational rules mean thereâ€™s a grey background, black color and no underlining of the links. Pretty basic, and it looks like this. The last few things weâ€™ll do are add hover and active states for each link, and separate each list item using the adjacent sibling selector.</p>

<pre><code>li + li {
    border-left:1px solid #ccc;
}
a:hover {
    color:#fff;
    background:#666;
}
a:active {
    color:#fff;
    background:#0090cf;
}
</code></pre>

<p>And our final result gives us a very simple but very effective <a href=\"http://jsfiddle.net/ashrobbins/SKzwU/\">horizontal nav bar</a>. Now you can go off and style it to your heartâ€™s content!</p>"}, {"id": 29,"title": "Remove an elementâ€™s text using jQuery","slug": "remove-an-elements-text-using-jquery","date": "2012-05-24 00:00:00","hero": "","content_html": "<p>One of our older CMSs at work spits out some unwanted pipe (|) characters within the lis of its header menu. For exampleâ€¦</p>

<pre><code><ul>
    <>
        <a href=\"#\">Page One</a>|
    </li>
    <li>
        <a href=\"#\">Page Two</a>|
    </li>
    <li>
        <a href=\"#\">Home</a>|
    </li>
</ul>
</code></pre>

<p>The pipes get added after every anchor. I donâ€™t want them there.</p>

<p>Looking around for a jQuery solution I only found tutorials that show how to remove or change the entire content of an element using .text(). The issue with that is that it will also remove any descendant elements, so in the case above Iâ€™d be left with empty lis and no actual anchors.</p>

<p>The code below gets around that.</p>

<pre><code>/* Getting rid of the pipe characters from Header Menus */
$(\'#Header_Menu li\')
    .each(function (i) {
        /* Place the anchor into a variable */
        anchor = $(this)
            .find(\'a\');

        /* Remove the current contents of the li, including the anchor */
        $(this)
            .text(\'\');

        /* Place the anchor back inside the li */
        anchor
            .appendTo($(this));
    });
</code></pre>

<p>I\'m pretty much a beginner when it comes to jQuery, so I\'m sure this could be improved upon. But at least now I\'ve got a nice clean list of menu items that I can style as I please. Tidy.</p>"}, {"id": 64,"title": "Menu Item Borders using the Adjacent Sibling Selector","slug": "li-borders-using-the-adjacent-sibling-selector","date": "2012-01-19 00:00:00","hero": "","content_html": "<p>The adjacent selector has been in CSS for years, and as far as I can work out it works in all browsers except IE 6 and below (<a href=\"http://kimblim.dk/css-tests/selectors/\">http://kimblim.dk/css-tests/selectors/</a>). But I just saw a use for it on the Twitter website that I totally hadnâ€™t considered (that probably says more about me than anything else).</p>

<p>So imagine youâ€™ve got a pretty standard list of menu items inside a <code>nav</code> element.</p>

<pre><code>&lt;nav&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=\"#\"&gt;One&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=\"#\"&gt;Two&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=\"#\"&gt;Three&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/nav&gt;
</code></pre>

<p>And you want to have them displayed horizontally with clear borders between each link in the menu. What I would have done previously is to slap a border on the <code>&lt;nav&gt;</code>, either a <code>border-right</code> or a <code>border-left</code> on each of the as, and then use <code>:first-child</code> to take the border off of the first <code>&lt;a&gt;</code>.</p>

<p>BUT! It turns out thatâ€™s a bit of a dumb way to do it, and more than anything itâ€™s overkill. Using the adjacent sibling selector(<code>+</code>) we can just apply a <code>border-left</code> to any <code>&lt;a&gt;
</code>, which is contained within a <code>&lt;li&gt;</code> that immediately follows an <code>&lt;li&gt;</code>. The first <code>&lt;li&gt;</code> in the list wonâ€™t match this criteria as it doesnâ€™t follow anything, so the <code>&lt;a&gt;</code> inside it wonâ€™t be given a border.</p>

<pre><code>nav {
    border:1px solid #ddd;
}
nav li + li a {
    border-left: 1px solid #ddd;
}
</code></pre>

<p><a href=\"http://www.ashrobbins.com/playground/adjacent-sibling-selector.html\">View demo</a></p>"}, {"id": 65,"title": "CSS Sliding Form Helpers","slug": "css-sliding-form-helpers","date": "2012-01-04 00:00:00","hero": "","content_html": "<p>Back at the start of December I tweeted a jsfiddle I made as a result of playing around with a technique Harry Roberts shared a week or so before that, for displaying form input hints when the input is focussed. That tweet is below.</p>

<p><a href=\"https://twitter.com/ash_robbins/status/142547826860240896\">https://twitter.com/ash_robbins/status/142547826860240896</a></p>

<p>I thought it would be pretty friendly to write it up, both for other people and also to help me understand it better.</p>

<h2>The HTML</h2>

<p>â€¦ is actually pretty simple.</p>

<p>Weâ€™ve got a label for our field, the input itself, and a small element with the class of .help which holds the field hint text. These three elements are wrapped in a p, and the reason for this will be explained in a bit.</p>

<h2>The CSS</h2>

<p>First off letâ€™s add a couple of rules to display our label and input on separate lines, and add a bit of padding to the input. Presentational niceties, but it is quite important to have both of these elements on different lines on your page.</p>

<pre><code>label{
    display:block;
}
input {
    margin:0;
    padding:5px;
}
</code></pre>

<p>Next we need to set up some styling and the default positioning of our small element, which has the class of help. Aside from the shiny stuff like color, background and border-radius, the important things to take note of are:</p>

<p>the fact that weâ€™ve given it a great big margin-left, so by default it is positioned way off to the left of where it would normally be
it has relative positioning and a negative z-index so we can make sure it sits behind its corresponding input field
it has transition properties which will transition all the features of this element over 0.5 seconds</p>

<pre><code>.help{
    position:relative;
    margin-left:-500px;
    padding:3px 6px;
    background:#444;
    color:#fff;
    z-index:-2;
    -webkit-border-radius:3px;
    -moz-border-radius:3px;
    border-radius:3px;
    -webkit-transition:all 0.5s;
    -moz-transition:all 0.5s;
    transition:all 0.5s;
}
</code></pre>

<p>Now we add a little triangle to the left edge of the small element to make it look like a speech bubble, using the :after pseudo-element.</p>

<pre><code>.help:after {
    content: \" \";
    display: block;
    width: 0;
    height: 0;
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
    border-right: 6px solid #444;
    position: absolute;
    top: 5px;
    left: -6px;
    z-index: 2;
}
</code></pre>

<p>Thereâ€™s a really good demo of the different psuedo-element shapes you can make by Chris Coyier here on his blog, so it isnâ€™t worth me trying to explain it when heâ€™s already done it better than I could.</p>

<p>At this stage the small element with our help text would be displayed behind the input, but it would be visible out the left hand side of the containing p. So to remedy that we hide the overflow of the p element so that we canâ€™t see the help text. This is the reason we have the p element at all; so we can hide the default position of the small element by hiding anything that flows outside of this containing p.</p>

<pre><code>p {
    overflow:hidden;
}
</code></pre>

<p>The last thing we need to do is to actually trigger the transition of the small element holding our help text, so that whenever the input is focussed or active, the help text will move smoothly out from behind the input and wind up to the right of the it, giving our user a nicely friendly nudge in the right direction. The small element already has the transition property applied to it from when we wrote the .help rule, so to trigger it all we need to do is give it a new margin-left when the input is focussed.</p>

<pre><code>.text:active + .help,
.text:focus + .help {
    margin-left: 5px;
}
</code></pre>

<p>To do this we use the adjacent sibling selector (+), and say that whenever an element with the class .text is focussed or active, give any adjacent siblings of it with the class of .help a margin-left of 5 pixels.</p>

<p>And thatâ€™s it. Take a look at all of the code working together in <a href=\"http://www.ashrobbins.com/playground/sliding-form-helpers.php\">the demo</a>.</p>"}, {"id": 63,"title": "A bit LESS SASSy","slug": "a-bit-less-sassy","date": "2011-11-09 00:00:00","hero": "","content_html": "<p>For quite some time now people have been raving about LESS and SASS and the benefits they have over writing single scoop vanilla CSS. Allow me, if I may, to wade in and add a few of my thoughts on why, instead of choosing one or the other, neither of them are necessary to me at all.</p>

<p>First off its important to realise that CSS is not a programming language, it is a presentation language and when written properly itâ€™s elegant, flexible and â€“ perhaps most importantly â€“ simple. Therefore it shouldnâ€™t be made more complex than it needs to be with functions and variables as these are features of a programming language. Iâ€™d suggest that youâ€™d be better off making your markup more sensible so that you donâ€™t have to repeat yourself so much in your style sheet. That way your need for variables is irrelevant and you should only need to declare things like colours once or twice.</p>

<p>In fact instead of functions or variables, why not just have a â€˜Sharedâ€™ section (<a href=\"http://coding.smashingmagazine.com/2011/08/26/writing-css-for-others/\">credit Harry Roberts</a>) near the top of the sheet? Any properties that need to be applied to several different elements on the page (border-radii, colors, etc.) can just be declared that one time in the shared section, and even better, if that value needs to be changed it only needs to be changed that one time. Effectively achieving the same outcome as a variable.</p>

<p>One of the things that strikes me most is that while itâ€™s true that using LESS or SASS can dramatically reduce the size of your style sheets initially, when they get compiled for a release to production the CSS is expanded and output in the same way as if youâ€™d written it long handed anyway. So youâ€™d have to take great care not to get too involved in things like nesting rules, because itâ€™s all gonna get expanded anyway.</p>

<p>LESS and SASS are almost languages all of their own, and it seems silly to me to learn how to code in a new language for the benefit of a language you already know and can probably write perfectly well. CSS will probably adopt a lot of the tools that LESS and SASS offer in the coming years, by which time theyâ€™ll become redundant. If weâ€™re talking about them being time savers, why not spend the time setting up your own boilerplate and then start every project from there? It will probably take the same amount of time as setting up and figuring out LESS or SASS, and youâ€™ll have <a href=\"https://github.com/ashrobbins/Scratch\">your very own personalised toolkit</a> for all your new projects.</p>

<p>It might just be that Iâ€™m not working on big enough builds at the moment, but I just donâ€™t see the point.</p>"}, {"id": 62,"title": "Have A Little Patience","slug": "have-a-little-patience","date": "2011-10-25 00:00:00","hero": "","content_html": "<p>Weâ€™ve all been there. The phone rings or an email arrives from a client asking the most basic of questions, that you know youâ€™ve already answered for them a thousand times before. The gut reaction is to swear and shout at your screen in frustration at the sheer dip-shittedness of the people youâ€™re supporting.</p>

<p>I had one today in fact. Iâ€™ve been working on a new site template for a client over the past few months, and theyâ€™ve seen it several times before. But they choose today, when weâ€™re nearing the end of the process, to ask whether their two columned design can take banners in a third, currently non-existent, column. Obviously my reaction to reading this was â€œWhat the hell? No of course it canâ€™t take banners there! Why didnâ€™t you tell me you wanted three columns in the first place?! Jason Christ!â€. But now Iâ€™ve simmered down, my stance has changed a bit, hence the reason for writing this post.</p>

<p>The fact is, our clients donâ€™t actually know very much about the way the web works. At all. Itâ€™s not unlikely for a network support guy to get asked if he can fix a website thatâ€™s gone down, even if itâ€™s completely unrelated to the company he works for. A friend of mine works in the IT team at a school and recently the internet was down in their area due to a cock-up by the council. But all the teachers thought that the IT team should be able to fix the internet. If it can be seen on their computer screen then the assumption is that anyone who has a slightly IT related job can fix it.</p>

<p>And itâ€™s understandable that people have these assumptions, and also that they just donâ€™t understand every single thing about the web, or computers in general. A lot of the words and terms we use in our day to day working lives would make the average Joe run a mile â€“ not necessarily because they arenâ€™t smart people either. Computing/Web/Whatever you want to call it, is so diverse and no one person can be an expert in everything. I think I have a pretty good grip on HTML and CSS, but thatâ€™s my job, and I wouldnâ€™t have the first idea where to start if you asked me to code you up a program in ASP. Both are development languages, but they are poles apart in terms of what they do. So for us to expect our clients to understand, who generally have little to no knowledge of computers past Microsoft Word, well itâ€™s a bit unfair when you think about it.</p>

<p>Iâ€™m going to try and be a bit more patient from now on. Iâ€™m not saying itâ€™ll be easy because I know it wonâ€™t be. The same frustrations will come back and Iâ€™ll no doubt swear at an email tomorrow. But at the end of the day itâ€™s only fair to give people a bit of lee-way, after all I couldnâ€™t run a council or a trade association or any other kind of business that we produce solutions for. Have a little patience.</p>"}, {"id": 61,"title": "Image Captions Using the Alt Attribute","slug": "image-captions-using-the-alt-attribute","date": "2011-09-16 00:00:00","hero": "","content_html": "<p>The other day my boss wanted me to see if we could use an imageâ€™s alt attribute as its caption for a new theme Iâ€™ve been working on. This is a pretty decent idea and sounded easy enough, but after an hour or so of googling and tweeting people in the know, I quickly realised that it isnâ€™t possible with pure CSS.</p>

<p>Oh crud! What now? Iâ€™ll tell you what now. Now I turn to my multi-talented pal jQuery. Heâ€™ll know what to do.</p>

<p>So what me and jQuery ended up doing was this.</p>

<ol>
<li>Wrap the image in the element <code><span class=\"image-span\"></span></code></li>
<li>Add the value of the imageâ€™s <code>alt</code> attribute to a variable called <code>display_alt</code>.</li>
<li>Check if <code>display_alt</code> is empty.</li>
<li>If it isnâ€™t, add the element <code><p class=\"image-caption\" ></p></code> after the image, but within <code>image-span</code>, and fill this element with the <code>display_alt</code> variable.</li>
</ol>

<p>Weâ€™ll end up with the following HTML if the image has an alt attributeâ€¦</p>

<pre><code>`<span class=\"image-span\">
    <img src=\"/path/to/image.png\" alt=\"Nice Image\" />
    <p class=\"image-caption\">Nice Image</p>
</span>`
</code></pre>

<p>â€¦and if it doesnâ€™t have an <code>alt</code> attribute weâ€™ll get thisâ€¦</p>

<pre><code><span class=\"image-span\">
    <img src=\"/path/to/image.png\" alt=\"\" />
</span>
</code></pre>

<p>The script to do all that is as follows.</p>

<pre><code>//Wrap the img in the element <span class=\"image-span\"></span>
$(\"article img\").wrap(\'<span class=\"image-span\" ></span>\');

//Assign the alt atribute of the image to the variable display_alt
var display_alt = $(\"article img\").attr(\"alt\");

//If the variable display_alt is not empty, add the element <p class=\"image-caption\"> after the image,
//with the variable display_alt as the content of this new <p> element.
if (display_alt !== \"\") {
    $(\"article img\").after(\'<p class=\"image-caption\">\' + display_alt + \'</p>\');
}
</code></pre>

<p>Just a little trick that might come in useful some time. Itâ€™s nice to share!</p>"}, {"id": 60,"title": "Make It Look Nicer","slug": "make-it-look-nicer","date": "2011-09-09 00:00:00","hero": "","content_html": "<p>Just thought Iâ€™d share a couple of cool things Iâ€™ve been using more and more in projects recently â€“ <code>hyphens</code> and <code>::selection</code>. Both features are only available in newer versions of browsers, but the key with both of them is that anyone who canâ€™t support them wonâ€™t know any different. Itâ€™s progressive enhancement in action.</p>

<h2>hyphens</h2>

<p>You know how if youâ€™re reading a book or a newspaper, and you get to the end of a line and the next word is too long to fit in, and the printers plonk a hyphen in the middle of the word and just carry it on on the next line? Us web folk have never had that ability. If we left justify a block of text we end up with a raggedy right hand edge where words of different lengths finish off the lines, and if we use <code>text-align:justify;</code> then we often end up with huge rivers of white running through our text. Ugly.</p>

<p>This is where <code>hyphens</code> come in.</p>

<p>All we need to do to hyphenate our paragraphs is add the following properties to our CSS.</p>

<pre><code>-webkit-hyphens: auto;
-moz-hyphens: auto;
hyphens: auto;
</code></pre>

<p>A quick word on supportâ€¦</p>

<blockquote>
  <p>Currently hyphens is supported in Safari 5.1 and Firefox 6. For Firefox 6 the lang-attribute must be set as mentioned above. <a href=\"https://developer.mozilla.org/en/CSS/hyphens#AutoCompatibilityTable\">Also it only supports english</a>.
  It is not working in Chrome 15.</p>

  <p><a href=\"http://drublic.de/blog/css3-auto-hyphenation-for-text-elements/\">http://drublic.de/blog/css3-auto-hyphenation-for-text-elements/</a></p>
</blockquote>

<p>So even though not everybody will see the hyphens, it will be a nice enhancement for everyone who does have a broswer that supports them. Also itâ€™ll mean your CSS is future-proof and ready for the day when hyphens are more widely supported. View this site in the latest Firefox to see hyphens in action.</p>

<h2>::selection</h2>

<p>We can use <code>::selection</code> in its simplest form to change the <code>color</code> and <code>background</code> values of highlighted text on a page from the standard white on blue, to any colours you like.</p>

<pre><code>::selection {
    background:#5BC961;
    color:#ffffff;
}
::-moz-selection {
    background:#5BC961;
    color:#ffffff;
}
</code></pre>

<p>Again, you wonâ€™t be able to see this effect unless youâ€™re using a newer browser, but Firefox (4+), Chrome, Safari and even IE9 are all supporting this feature, and again itâ€™s a nice piece of progressive enhancement for those who are able to see it. Highlight some text on this page why donâ€™t ya.</p>"}, {"id": 59,"title": "Simple Paper Stack Effect with Pure CSS","slug": "simple-paper-stack-effect-with-pure-css","date": "2011-08-31 00:00:00","hero": "","content_html": "<p>This neat little trick adds a very simple paper stack effect to an element, without the need for images.</p>

<p>I got the idea after watching <a href=\"http://www.twitter.com/chriscoyier\">Chris Coyier</a>â€˜s awesome talk on CSS pseudo elements at this yearâ€™s CSS Summit. Itâ€™s really very simple to put in place and, considering pseudo elements have been available since CSS2, <a href=\"http://css-tricks.com/9189-browser-support-pseudo-elements/\">browser support is very good</a> although you will come across problems in IE7 and down. But you probably expected that right?</p>

<p>So first up we need to create a simple element that will act as the top piece of paper in the stack.</p>

<pre><code>.container {
    width:500px;
    position:relative;
    background:#ffffff;
    border:1px solid #eeeeee;
}
</code></pre>

<p>One of the cool things about CSS is that we get two free elements for every single element on the page, through the use of the <code>:before</code> and <code>:after</code> pseudo classes. So when you realise that, the next couple of steps will probably start to become fairly obvious. Weâ€™re gonna create two new elements which will be absolutely positioned at the bottom of the container div, both of them slightly narrower than the last, which is what creates our layered effect.</p>

<pre><code>.container:before {
    content:\"\";
    width:480px;
    height:6px;
    position:absolute;
    bottom:-8px;
    left:10px;
    background:#fff;
    border:1px solid #eeeeee;
}
.container:after {
    content:\"\";
    width:460px;
    height:6px;
    position:absolute;
    bottom:-15px;
    left:20px;
    background:#fff;
    border:1px solid #eeeeee;
}
</code></pre>

<p>So what weâ€™ve done there is add an empty element with <code>content:\"\";</code>, set its width and height, then placed it underneath the bottom of the container div using a minus value â€“ <code>bottom:-8px;</code>. The second element, <code>:after</code>, is positioned further down the page, and also slightly further in from the left, because itâ€™s width is narrower. Therefore we will end up with the widest item at the top, the next widest directly beneath it and the narrowest at the very bottom.</p>

<p>You can style the elements any way you like of course. Take a look at the demo for a more stripped back version than what you can see on this page.</p>

<p><a href=\"http://www.ashrobbins.com/playground/paper-stack.php\">Demo</a></p>

<p>Iâ€™d also recommend checking out these other two ideas that were shown to me by <a href=\"http://forrst.com/people/joshuanhibbert\">joshuanhibbert</a> on Forrst. Pretty cool stuff! If you use this anywhere be sure to share and let me know!</p>"}]
